/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.valkyrie.db.gen;

import org.apache.commons.lang.builder.HashCodeBuilder;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MapReduceRequest implements org.apache.thrift.TBase<MapReduceRequest, MapReduceRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MapReduceRequest");

  private static final org.apache.thrift.protocol.TField MAPPER_FIELD_DESC = new org.apache.thrift.protocol.TField("mapper", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMBINER_FIELD_DESC = new org.apache.thrift.protocol.TField("combiner", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField REDUCER_FIELD_DESC = new org.apache.thrift.protocol.TField("reducer", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SERIALIZER_FIELD_DESC = new org.apache.thrift.protocol.TField("serializer", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private IFunction mapper;
  private IFunction combiner;
  private IFunction reducer;
  private IFunction serializer;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MAPPER((short)1, "mapper"),
    COMBINER((short)2, "combiner"),
    REDUCER((short)3, "reducer"),
    SERIALIZER((short)4, "serializer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MAPPER
          return MAPPER;
        case 2: // COMBINER
          return COMBINER;
        case 3: // REDUCER
          return REDUCER;
        case 4: // SERIALIZER
          return SERIALIZER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MAPPER, new org.apache.thrift.meta_data.FieldMetaData("mapper", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IFunction.class)));
    tmpMap.put(_Fields.COMBINER, new org.apache.thrift.meta_data.FieldMetaData("combiner", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IFunction.class)));
    tmpMap.put(_Fields.REDUCER, new org.apache.thrift.meta_data.FieldMetaData("reducer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IFunction.class)));
    tmpMap.put(_Fields.SERIALIZER, new org.apache.thrift.meta_data.FieldMetaData("serializer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IFunction.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MapReduceRequest.class, metaDataMap);
  }

  public MapReduceRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MapReduceRequest(MapReduceRequest other) {
    if (other.isSetMapper()) {
      this.mapper = new IFunction(other.mapper);
    }
    if (other.isSetCombiner()) {
      this.combiner = new IFunction(other.combiner);
    }
    if (other.isSetReducer()) {
      this.reducer = new IFunction(other.reducer);
    }
    if (other.isSetSerializer()) {
      this.serializer = new IFunction(other.serializer);
    }
  }

  public MapReduceRequest deepCopy() {
    return new MapReduceRequest(this);
  }

  @Override
  public void clear() {
    this.mapper = null;
    this.combiner = null;
    this.reducer = null;
    this.serializer = null;
  }

  public IFunction getMapper() {
    return this.mapper;
  }

  public void setMapper(IFunction mapper) {
    this.mapper = mapper;
  }

  public void unsetMapper() {
    this.mapper = null;
  }

  /** Returns true if field mapper is set (has been assigned a value) and false otherwise */
  public boolean isSetMapper() {
    return this.mapper != null;
  }

  public void setMapperIsSet(boolean value) {
    if (!value) {
      this.mapper = null;
    }
  }

  public IFunction getCombiner() {
    return this.combiner;
  }

  public void setCombiner(IFunction combiner) {
    this.combiner = combiner;
  }

  public void unsetCombiner() {
    this.combiner = null;
  }

  /** Returns true if field combiner is set (has been assigned a value) and false otherwise */
  public boolean isSetCombiner() {
    return this.combiner != null;
  }

  public void setCombinerIsSet(boolean value) {
    if (!value) {
      this.combiner = null;
    }
  }

  public IFunction getReducer() {
    return this.reducer;
  }

  public void setReducer(IFunction reducer) {
    this.reducer = reducer;
  }

  public void unsetReducer() {
    this.reducer = null;
  }

  /** Returns true if field reducer is set (has been assigned a value) and false otherwise */
  public boolean isSetReducer() {
    return this.reducer != null;
  }

  public void setReducerIsSet(boolean value) {
    if (!value) {
      this.reducer = null;
    }
  }

  public IFunction getSerializer() {
    return this.serializer;
  }

  public void setSerializer(IFunction serializer) {
    this.serializer = serializer;
  }

  public void unsetSerializer() {
    this.serializer = null;
  }

  /** Returns true if field serializer is set (has been assigned a value) and false otherwise */
  public boolean isSetSerializer() {
    return this.serializer != null;
  }

  public void setSerializerIsSet(boolean value) {
    if (!value) {
      this.serializer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MAPPER:
      if (value == null) {
        unsetMapper();
      } else {
        setMapper((IFunction)value);
      }
      break;

    case COMBINER:
      if (value == null) {
        unsetCombiner();
      } else {
        setCombiner((IFunction)value);
      }
      break;

    case REDUCER:
      if (value == null) {
        unsetReducer();
      } else {
        setReducer((IFunction)value);
      }
      break;

    case SERIALIZER:
      if (value == null) {
        unsetSerializer();
      } else {
        setSerializer((IFunction)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MAPPER:
      return getMapper();

    case COMBINER:
      return getCombiner();

    case REDUCER:
      return getReducer();

    case SERIALIZER:
      return getSerializer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MAPPER:
      return isSetMapper();
    case COMBINER:
      return isSetCombiner();
    case REDUCER:
      return isSetReducer();
    case SERIALIZER:
      return isSetSerializer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MapReduceRequest)
      return this.equals((MapReduceRequest)that);
    return false;
  }

  public boolean equals(MapReduceRequest that) {
    if (that == null)
      return false;

    boolean this_present_mapper = true && this.isSetMapper();
    boolean that_present_mapper = true && that.isSetMapper();
    if (this_present_mapper || that_present_mapper) {
      if (!(this_present_mapper && that_present_mapper))
        return false;
      if (!this.mapper.equals(that.mapper))
        return false;
    }

    boolean this_present_combiner = true && this.isSetCombiner();
    boolean that_present_combiner = true && that.isSetCombiner();
    if (this_present_combiner || that_present_combiner) {
      if (!(this_present_combiner && that_present_combiner))
        return false;
      if (!this.combiner.equals(that.combiner))
        return false;
    }

    boolean this_present_reducer = true && this.isSetReducer();
    boolean that_present_reducer = true && that.isSetReducer();
    if (this_present_reducer || that_present_reducer) {
      if (!(this_present_reducer && that_present_reducer))
        return false;
      if (!this.reducer.equals(that.reducer))
        return false;
    }

    boolean this_present_serializer = true && this.isSetSerializer();
    boolean that_present_serializer = true && that.isSetSerializer();
    if (this_present_serializer || that_present_serializer) {
      if (!(this_present_serializer && that_present_serializer))
        return false;
      if (!this.serializer.equals(that.serializer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_mapper = true && (isSetMapper());
    builder.append(present_mapper);
    if (present_mapper)
      builder.append(mapper);

    boolean present_combiner = true && (isSetCombiner());
    builder.append(present_combiner);
    if (present_combiner)
      builder.append(combiner);

    boolean present_reducer = true && (isSetReducer());
    builder.append(present_reducer);
    if (present_reducer)
      builder.append(reducer);

    boolean present_serializer = true && (isSetSerializer());
    builder.append(present_serializer);
    if (present_serializer)
      builder.append(serializer);

    return builder.toHashCode();
  }

  public int compareTo(MapReduceRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    MapReduceRequest typedOther = (MapReduceRequest)other;

    lastComparison = Boolean.valueOf(isSetMapper()).compareTo(typedOther.isSetMapper());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapper()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapper, typedOther.mapper);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombiner()).compareTo(typedOther.isSetCombiner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombiner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combiner, typedOther.combiner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReducer()).compareTo(typedOther.isSetReducer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducer, typedOther.reducer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSerializer()).compareTo(typedOther.isSetSerializer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSerializer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serializer, typedOther.serializer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MAPPER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.mapper = new IFunction();
            this.mapper.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COMBINER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.combiner = new IFunction();
            this.combiner.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // REDUCER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.reducer = new IFunction();
            this.reducer.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SERIALIZER
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.serializer = new IFunction();
            this.serializer.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mapper != null) {
      if (isSetMapper()) {
        oprot.writeFieldBegin(MAPPER_FIELD_DESC);
        this.mapper.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.combiner != null) {
      if (isSetCombiner()) {
        oprot.writeFieldBegin(COMBINER_FIELD_DESC);
        this.combiner.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.reducer != null) {
      if (isSetReducer()) {
        oprot.writeFieldBegin(REDUCER_FIELD_DESC);
        this.reducer.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.serializer != null) {
      if (isSetSerializer()) {
        oprot.writeFieldBegin(SERIALIZER_FIELD_DESC);
        this.serializer.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MapReduceRequest(");
    boolean first = true;

    if (isSetMapper()) {
      sb.append("mapper:");
      if (this.mapper == null) {
        sb.append("null");
      } else {
        sb.append(this.mapper);
      }
      first = false;
    }
    if (isSetCombiner()) {
      if (!first) sb.append(", ");
      sb.append("combiner:");
      if (this.combiner == null) {
        sb.append("null");
      } else {
        sb.append(this.combiner);
      }
      first = false;
    }
    if (isSetReducer()) {
      if (!first) sb.append(", ");
      sb.append("reducer:");
      if (this.reducer == null) {
        sb.append("null");
      } else {
        sb.append(this.reducer);
      }
      first = false;
    }
    if (isSetSerializer()) {
      if (!first) sb.append(", ");
      sb.append("serializer:");
      if (this.serializer == null) {
        sb.append("null");
      } else {
        sb.append(this.serializer);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

}

