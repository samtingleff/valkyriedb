/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.valkyrie.db.gen;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ColumnValue extends org.apache.thrift.TUnion<ColumnValue, ColumnValue._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ColumnValue");
  private static final org.apache.thrift.protocol.TField V_INT_FIELD_DESC = new org.apache.thrift.protocol.TField("v_int", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField V_LONG_FIELD_DESC = new org.apache.thrift.protocol.TField("v_long", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField V_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("v_double", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField V_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("v_string", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField V_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("v_bytes", org.apache.thrift.protocol.TType.STRING, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    V_INT((short)1, "v_int"),
    V_LONG((short)2, "v_long"),
    V_DOUBLE((short)3, "v_double"),
    V_STRING((short)4, "v_string"),
    V_BYTES((short)5, "v_bytes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // V_INT
          return V_INT;
        case 2: // V_LONG
          return V_LONG;
        case 3: // V_DOUBLE
          return V_DOUBLE;
        case 4: // V_STRING
          return V_STRING;
        case 5: // V_BYTES
          return V_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.V_INT, new org.apache.thrift.meta_data.FieldMetaData("v_int", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.V_LONG, new org.apache.thrift.meta_data.FieldMetaData("v_long", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.V_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("v_double", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.V_STRING, new org.apache.thrift.meta_data.FieldMetaData("v_string", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.V_BYTES, new org.apache.thrift.meta_data.FieldMetaData("v_bytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ColumnValue.class, metaDataMap);
  }

  public ColumnValue() {
    super();
  }

  public ColumnValue(_Fields setField, Object value) {
    super(setField, value);
  }

  public ColumnValue(ColumnValue other) {
    super(other);
  }
  public ColumnValue deepCopy() {
    return new ColumnValue(this);
  }

  public static ColumnValue v_int(int value) {
    ColumnValue x = new ColumnValue();
    x.setV_int(value);
    return x;
  }

  public static ColumnValue v_long(long value) {
    ColumnValue x = new ColumnValue();
    x.setV_long(value);
    return x;
  }

  public static ColumnValue v_double(double value) {
    ColumnValue x = new ColumnValue();
    x.setV_double(value);
    return x;
  }

  public static ColumnValue v_string(String value) {
    ColumnValue x = new ColumnValue();
    x.setV_string(value);
    return x;
  }

  public static ColumnValue v_bytes(ByteBuffer value) {
    ColumnValue x = new ColumnValue();
    x.setV_bytes(value);
    return x;
  }

  public static ColumnValue v_bytes(byte[] value) {
    ColumnValue x = new ColumnValue();
    x.setV_bytes(ByteBuffer.wrap(value));
    return x;
  }


  @Override
  protected void checkType(_Fields setField, Object value) throws ClassCastException {
    switch (setField) {
      case V_INT:
        if (value instanceof Integer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Integer for field 'v_int', but got " + value.getClass().getSimpleName());
      case V_LONG:
        if (value instanceof Long) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Long for field 'v_long', but got " + value.getClass().getSimpleName());
      case V_DOUBLE:
        if (value instanceof Double) {
          break;
        }
        throw new ClassCastException("Was expecting value of type Double for field 'v_double', but got " + value.getClass().getSimpleName());
      case V_STRING:
        if (value instanceof String) {
          break;
        }
        throw new ClassCastException("Was expecting value of type String for field 'v_string', but got " + value.getClass().getSimpleName());
      case V_BYTES:
        if (value instanceof ByteBuffer) {
          break;
        }
        throw new ClassCastException("Was expecting value of type ByteBuffer for field 'v_bytes', but got " + value.getClass().getSimpleName());
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case V_INT:
          if (field.type == V_INT_FIELD_DESC.type) {
            Integer v_int;
            v_int = iprot.readI32();
            return v_int;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_LONG:
          if (field.type == V_LONG_FIELD_DESC.type) {
            Long v_long;
            v_long = iprot.readI64();
            return v_long;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_DOUBLE:
          if (field.type == V_DOUBLE_FIELD_DESC.type) {
            Double v_double;
            v_double = iprot.readDouble();
            return v_double;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_STRING:
          if (field.type == V_STRING_FIELD_DESC.type) {
            String v_string;
            v_string = iprot.readString();
            return v_string;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case V_BYTES:
          if (field.type == V_BYTES_FIELD_DESC.type) {
            ByteBuffer v_bytes;
            v_bytes = iprot.readBinary();
            return v_bytes;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_INT:
        Integer v_int = (Integer)value_;
        oprot.writeI32(v_int);
        return;
      case V_LONG:
        Long v_long = (Long)value_;
        oprot.writeI64(v_long);
        return;
      case V_DOUBLE:
        Double v_double = (Double)value_;
        oprot.writeDouble(v_double);
        return;
      case V_STRING:
        String v_string = (String)value_;
        oprot.writeString(v_string);
        return;
      case V_BYTES:
        ByteBuffer v_bytes = (ByteBuffer)value_;
        oprot.writeBinary(v_bytes);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case V_INT:
          Integer v_int;
          v_int = iprot.readI32();
          return v_int;
        case V_LONG:
          Long v_long;
          v_long = iprot.readI64();
          return v_long;
        case V_DOUBLE:
          Double v_double;
          v_double = iprot.readDouble();
          return v_double;
        case V_STRING:
          String v_string;
          v_string = iprot.readString();
          return v_string;
        case V_BYTES:
          ByteBuffer v_bytes;
          v_bytes = iprot.readBinary();
          return v_bytes;
        default:
          throw new IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      return null;
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case V_INT:
        Integer v_int = (Integer)value_;
        oprot.writeI32(v_int);
        return;
      case V_LONG:
        Long v_long = (Long)value_;
        oprot.writeI64(v_long);
        return;
      case V_DOUBLE:
        Double v_double = (Double)value_;
        oprot.writeDouble(v_double);
        return;
      case V_STRING:
        String v_string = (String)value_;
        oprot.writeString(v_string);
        return;
      case V_BYTES:
        ByteBuffer v_bytes = (ByteBuffer)value_;
        oprot.writeBinary(v_bytes);
        return;
      default:
        throw new IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case V_INT:
        return V_INT_FIELD_DESC;
      case V_LONG:
        return V_LONG_FIELD_DESC;
      case V_DOUBLE:
        return V_DOUBLE_FIELD_DESC;
      case V_STRING:
        return V_STRING_FIELD_DESC;
      case V_BYTES:
        return V_BYTES_FIELD_DESC;
      default:
        throw new IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public int getV_int() {
    if (getSetField() == _Fields.V_INT) {
      return (Integer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_int' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_int(int value) {
    setField_ = _Fields.V_INT;
    value_ = value;
  }

  public long getV_long() {
    if (getSetField() == _Fields.V_LONG) {
      return (Long)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_long' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_long(long value) {
    setField_ = _Fields.V_LONG;
    value_ = value;
  }

  public double getV_double() {
    if (getSetField() == _Fields.V_DOUBLE) {
      return (Double)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_double' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_double(double value) {
    setField_ = _Fields.V_DOUBLE;
    value_ = value;
  }

  public String getV_string() {
    if (getSetField() == _Fields.V_STRING) {
      return (String)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_string' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_string(String value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_STRING;
    value_ = value;
  }

  public byte[] getV_bytes() {
    setV_bytes(org.apache.thrift.TBaseHelper.rightSize(bufferForV_bytes()));
    ByteBuffer b = bufferForV_bytes();
    return b == null ? null : b.array();
  }

  public ByteBuffer bufferForV_bytes() {
    if (getSetField() == _Fields.V_BYTES) {
      return (ByteBuffer)getFieldValue();
    } else {
      throw new RuntimeException("Cannot get field 'v_bytes' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setV_bytes(byte[] value) {
    setV_bytes(ByteBuffer.wrap(value));
  }

  public void setV_bytes(ByteBuffer value) {
    if (value == null) throw new NullPointerException();
    setField_ = _Fields.V_BYTES;
    value_ = value;
  }

  public boolean isSetV_int() {
    return setField_ == _Fields.V_INT;
  }


  public boolean isSetV_long() {
    return setField_ == _Fields.V_LONG;
  }


  public boolean isSetV_double() {
    return setField_ == _Fields.V_DOUBLE;
  }


  public boolean isSetV_string() {
    return setField_ == _Fields.V_STRING;
  }


  public boolean isSetV_bytes() {
    return setField_ == _Fields.V_BYTES;
  }


  public boolean equals(Object other) {
    if (other instanceof ColumnValue) {
      return equals((ColumnValue)other);
    } else {
      return false;
    }
  }

  public boolean equals(ColumnValue other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(ColumnValue other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    HashCodeBuilder hcb = new HashCodeBuilder();
    hcb.append(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      hcb.append(setField.getThriftFieldId());
      Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        hcb.append(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        hcb.append(value);
      }
    }
    return hcb.toHashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}
